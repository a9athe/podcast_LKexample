import yaml
import xml.etree.ElementTree as xml_tree

with open('feed.yaml', 'r') as file:
    yaml_data = yaml.safe_load(file)

    rss_element = xml_tree.Element('rss', {'version':'2.0',
        'xmlns:itunes':'http://www.itunes.com/dtds/podcast-1.0.dtd',
        'xmlns:content':'http://purl.org/rss/1.0/modules/content/'})
  
channel_element = xml_tree.SubElement(rss_element, 'channel') #creates the channel tag

link_prefix = yaml_data['link'] #the link generated by our github repo

xml_tree.SubElement(channel_element, 'title').text = yaml_data['title'] 
#creates a title tag inside the channel element with the data from the yaml file
xml_tree.SubElement(channel_element, 'format').text = yaml_data['format'] 
xml_tree.SubElement(channel_element, 'subtitle').text = yaml_data['subtitle'] 
xml_tree.SubElement(channel_element, 'itunes:author').text = yaml_data['author'] 
# /!/ here the RSS feed will have an itunes:author tag with the data from the author field of the yaml file
xml_tree.SubElement(channel_element, 'description').text = yaml_data['description'] 
xml_tree.SubElement(channel_element, 'itunes:image', {'href': link_prefix + yaml_data['image'] })
# has an attribute like an image tag with href
xml_tree.SubElement(channel_element, 'language').text = yaml_data['language'] 
xml_tree.SubElement(channel_element, 'link').text = link_prefix

xml_tree.SubElement(channel_element, 'itunes:category', {'text': yaml_data['category']})

# loop to create the section with all the episodes = items
for item in yaml_data['item']:
    item_element = xml_tree.SubElement(channel_element, 'item') #create the container
    xml_tree.SubElement(item_element, 'title').text = item['title']
    xml_tree.SubElement(item_element, 'itunes:author').text = yaml_data['author'] #because same author for every item
    xml_tree.SubElement(item_element, 'description').text = item['description']
    xml_tree.SubElement(item_element, 'itunes:duration').text = item['duration']
    xml_tree.SubElement(item_element, 'pubDate').text = item['published']
    
    enclosure = xml_tree.SubElement(item_element, 'enclosure', {
        'url': link_prefix + item['file'],
        'type': 'audio/mpeg', #because all the same so hardcode
        'length': item['length']
    })

output_tree = xml_tree.ElementTree(rss_element) #permits to send it out to an output file

output_tree.write('podcast.xml', encoding='UTF-8', xml_declaration=True) #generate the first tag of the RSS
